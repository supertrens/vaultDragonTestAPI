{"version":3,"sources":["../../src/controller/vaultDragonObject.js"],"names":["config","db","api","post","req","res","newVaulDragonObject","myKey","Object","keys","body","myValue","time","Date","now","key","value","save","err","json","timestamp","get","find","vaultDragonObjects","query","params","console","log","field","_id","mySort","findOne","sort","exec","vaultDragonObject","put","findById","id","mykey","delete","remove","mesage"],"mappings":"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","file":"vaultDragonObject.js","sourcesContent":["import mongoose \t\t\tfrom \t\"mongoose\";\nimport {Router}  \t\t\tfrom \t\"express\";\nimport VaultDragonObject \tfrom \t\"../model/vaultDragonObject\";\nimport bodyParser \t\t\tfrom \t\"body-parser\";\n\nexport default({config , db}) =>{\n\n\tlet api = Router();\n\n/*======================= CREATE ====================================*/\n\n\t//\"/vaultDragonObject\" -Post\n\tapi.post(\"/\" , (req , res) =>{\n\n\t\tlet newVaulDragonObject \t= new VaultDragonObject();\n\n\t\t//Take the current key\n\t\tlet myKey = Object.keys(req.body)[0];\n\t\t//take the value of the dynamic key\n\t\tlet myValue = req.body[myKey];\n\t\t//timestamp\n\t\tlet time = Date.now();\n\n\t\tnewVaulDragonObject.key \t= myKey;\n\t\tnewVaulDragonObject.value \t= myValue;\n\t\tnewVaulDragonObject.time    = time;\n\n\n\t\tnewVaulDragonObject.save(err => {\n\t\t\tif(err)\n\t\t\t\tres.json({'ERROR': err});\n\n\t\t\tres.json({key : myKey , value: myValue, timestamp : time})\n\t\t\n\t\t});\n\t});\n\n\n/*======================= READ =====================================*/\n\n\t//\"/vaultDragonObject\" - Read all (get)\n\tapi.get(\"/\" , (req , res) =>{\n\t\tVaultDragonObject.find({} ,(err , vaultDragonObjects) =>{\n\n\t\t\tif(err)\n\t\t\t\tres.json({'ERROR': err});\n\t\t\t//Print out all the object in the db if there is no error\n\t\t\tres.json(vaultDragonObjects);\n\t\t});\n\t});\n\n\n//\"/vaultDragonObject/:myKey?timestamp\" \n\tapi.get(\"/:myKey?timestamp\" , (req ,res ) =>{\n\n\t    //the query from the key in the Url\n\t\tlet query = {key : req.params.myKey};\n\t\tlet time  = req.params.timestamp;\n\n\t\tconsole.log(\"The time\" +time);\n\n\t\t//to precise that I only need the value field\n\t\tlet field = {value :1 , _id : 0  };\n\t});\n\n\n\t//\"/vaultDragonObject/:myKey\" -Read 1 (get)\n\tapi.get('/:myKey' , (req , res) => {\n\n\t\t//the query from the key in the Url\n\t\tlet query = {key : req.params.myKey};\n\n\t\t//to precise that I only need the value field\n\t\tlet field = {value :1 , _id : 0  };\n\n\t\tlet mySort = {time : -1};\n\n\t\n\t\t\n\n\t\tVaultDragonObject.findOne(query, field).sort(mySort).exec (function (err ,vaultDragonObject){\n\t\t\tif(err)\n\t\t\t\tres.json({'ERROR': err});\n\n\t\t\t//Print out the object if there is no error\n\t\t\t//res.json({value :vaultDragonObject.value});\n\t\t\tres.json(vaultDragonObject);\n\t\t});\n\t});\n\n\n\t\n\n\n\n/*======================= UPDATE =====================================*/\n\n\t//\"/vaultDragon/:id\"  -Put\n\tapi.put(\"/:id\" ,(req ,res) =>{\n\t\tVaultDragonObject.findById(req.params.id , (err ,vaultDragonObject) =>{\n\t\t\tif(err)\n\t\t\t\tres.json({'ERROR': err});\n\n\t\t\t//update the value\n\t\t\tvaultDragonObject.mykey = req.body.mykey;\n\n\t\t\tvaultDragonObject.save(err =>{\n\t\t\t\tif(err)\n\t\t\t\t\tres.json({'ERROR': err});\n\n\t\t\t\t//If no error I send the Item updated\n\t\t\t\tres.json(vaultDragonObject);\n\t\t\n\n\t\t\t});\n\t\t});\n\t});\n\n\n\t/*======================= DELETE =====================================*/\n\t//Not required from Vault Dragon\n\tapi.delete(\"/:id\" , (req , res) => {\n\t\tVaultDragonObject.remove({\n\t\t\t_id: req.params.id\n\t\t}, (err, vaultDragonObject) => {\n\t\t\tif(err)\n\t\t\t\tres.json({'ERROR': err});\n\n\t\t\t//send a json mesage to inform that the object has been removed\n\t\t\tres.json({ mesage : \"Object successfully removed!\"});\n\t\t});\n\t});\n\n\n\treturn api;\n}"]}